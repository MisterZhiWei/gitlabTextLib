// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SocketMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
#define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
#import <Protobuf/GPBProtocolBuffers.h>
#else
#import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class SCSocketContentMessage;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SCScoketMessageType

typedef GPB_ENUM(SCScoketMessageType) {
    /**
     * Value used if any message's field encounters a value that is not defined
     * by this enum. The message will also have C functions to get/set the rawValue
     * of the field.
     **/
    SCScoketMessageType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
    /** 默认未知类型 */
    SCScoketMessageType_Unknown = 0,
    
    /** 心跳消息 */
    SCScoketMessageType_Heartbeat = 1,
    
    /** 强制断开消息 */
    SCScoketMessageType_Kicked = 2,
    
    /** 进入房间消息 */
    SCScoketMessageType_Enter = 3,
    
    /** 数据消息 */
    SCScoketMessageType_Data = 4,
    
    /** 历史消息 */
    SCScoketMessageType_History = 5,
    
    /** 互动开始 */
    SCScoketMessageType_Start = 6,
    
    /** 互动结束 */
    SCScoketMessageType_End = 7,
    
    /** 获取指定历史消息 */
    SCScoketMessageType_Patch = 8,
    
    /** 消息发送失败 */
    SCScoketMessageType_Failed = 9,
    
    /** 消息回执 */
    SCScoketMessageType_Receipt = 10,
    
    /** 更换背景图片 */
    SCScoketMessageType_Image = 11,
    
    /** 清除历史消息 */
    SCScoketMessageType_Cleanup = 12,
};

GPBEnumDescriptor *SCScoketMessageType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCScoketMessageType_IsValidValue(int32_t value);

#pragma mark - SocketMessageRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface SocketMessageRoot : GPBRootObject
@end

#pragma mark - SCSocketMessage

typedef GPB_ENUM(SCSocketMessage_FieldNumber) {
    SCSocketMessage_FieldNumber_Type = 1,
    SCSocketMessage_FieldNumber_BodyArray = 2,
};

@interface SCSocketMessage : GPBMessage

/** 消息类型 */
@property(nonatomic, readwrite) SCScoketMessageType type;

/** 消息体 Array<ContentMessage> */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SCSocketContentMessage*> *bodyArray;
/** The number of items in @c bodyArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger bodyArray_Count;

@end

/**
 * Fetches the raw value of a @c SCSocketMessage's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCSocketMessage_Type_RawValue(SCSocketMessage *message);
/**
 * Sets the raw value of an @c SCSocketMessage's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCSocketMessage_Type_RawValue(SCSocketMessage *message, int32_t value);

#pragma mark - SCSocketContentMessage

typedef GPB_ENUM(SCSocketContentMessage_FieldNumber) {
    SCSocketContentMessage_FieldNumber_Roomid = 1,
    SCSocketContentMessage_FieldNumber_Index = 2,
    SCSocketContentMessage_FieldNumber_Msgid = 3,
    SCSocketContentMessage_FieldNumber_Timestamp = 4,
    SCSocketContentMessage_FieldNumber_From = 5,
    SCSocketContentMessage_FieldNumber_To = 6,
    SCSocketContentMessage_FieldNumber_ContentArray = 7,
};

/**
 * 数据消息格式
 **/
@interface SCSocketContentMessage : GPBMessage

/** 房间ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *roomid;

/** 消息所属互动次序 */
@property(nonatomic, readwrite) int64_t index;

/** 消息唯一标识 */
@property(nonatomic, readwrite) int64_t msgid;

/** 消息毫秒时间戳 */
@property(nonatomic, readwrite) int64_t timestamp;

@property(nonatomic, readwrite, copy, null_resettable) NSString *from;

@property(nonatomic, readwrite, copy, null_resettable) NSString *to;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *contentArray;
/** The number of items in @c contentArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger contentArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
